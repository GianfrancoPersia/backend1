mongo    // Inicializacion de mongo
show databases    // Chequeo de bases de datos creadas y disponibles
------------------------------------------------------------
                      MENSAJES

use mensajes    // Creacion y acceso a coleccion "mensajes"
db.dropDatabase()    // Borramos todo lo que tiene dentro
db.mensajes.insertMany([
    {
    "date": "2022-8-27",
    "mail": "alsjdhalsd@lijdfalskda",
    "text": "alkjshdajklshdkjas"
  },
  {
    "date": "2022-8-27",
    "mail": "sadasdasd@kljahsdjka",
    "text": "hkgasdfkljhsgdfksa"
  },
  {
    "date": "2022-8-27",
    "mail": "sadasdasd@kljahsdjka",
    "text": "hkgasdfkljhsgdfksa"
  },
  {
    "date": "2022-8-2722:14",
    "mail": "skludhflskd@lksajdhfkasd",
    "text": "laksuhdgflasd"
  },
  {
    "date": "2022-8-27  22:19",
    "mail": "lakhjsgdlaskda@kjashdlkjas",
    "text": "kauysgdkuaysgdkauyighdaiysghdaishgdliasud"
  },
  {
    "date": "2022-8-27  22:25",
    "mail": "matias@matias.com",
    "text": "Hola"
  },
  {
    "date": "2022-8-27  22:29",
    "mail": "mati@mati",
    "text": "Mati"
  },
  {
    "date": "2022-9-7  22:31",
    "mail": "matiasd@mati",
    "text": "Mati33"
  },
  {
    "date": "2022-9-8  15:30",
    "mail": "matiwasd@mati",
    "text": "Anteultimo mensaje"
  },
  {
    "date": "2022-9-8  16:22",
    "mail": "matiqwerty@mati",
    "text": "Ultimo mensaje"
  }
])    // Mensajes insertados

------------------------------------------------------------------
                      PRODUCTOS

use productos    // Creacion y acceso a coleccion "productos"
db.dropDatabase()    // Borramos todo lo que tiene dentro
db.productos.insertMany([
    {
    "name": "Air Force 1 Low",
    "price": 1800,
    "src": "randomurl"
  },
  {
    "name": "Yeezy Boost 350 V2.0",
    "price": 3200,
    "src": "randomurl"
  },
  {
    "name": "Nike Dunk Low",
    "price": 2300,
    "src": "randomurl"
  },
  {
    "name": "Jordan 4 Retro",
    "price": 850,
    "src": "randomurl"
  },
  {
    "name": "Nike Zoom Freak 3",
    "price": 900,
    "src": "randomurl"
  },
  {
    "name": "Jordan 1",
    "price": 780,
    "src": "randomurl"
  },
  {
    "name": "Nike Vomero 13",
    "price": 1500,
    "src": "randomurl"
  },
  {
    "name": "Nike Huarache",
    "price": 2500,
    "src": "randomurl"
  },
  {
    "name": "Nike Vapormax",
    "price": 1200,
    "src": "randomurl"
  },
  {
    "name": "Adidas HU",
    "price": 500,
    "src": "afdfaaf"
  }
])    // Productos insertados 

-----------------------------------------------------------------
// Mostrar todos los documentos de las colecciones

db.mensajes.find()
db.productos.find()

// Mostrar la cantidad de documentos de cada colecciones

db.mensajes.countDocuments()
db.productos.countdocuments()

---------------------------------------------------------------
                          CRUD

// Agregar un producto en la coleccion de productos

db.productos.insertOne({"name":"nuevo Producto","price":4800,"src":"new/route"})

// Consultas

 - Listar los productos con precio menor a 1000 pesos

db.productos.find({"price" : {$lt : 1000}})

 - Listar los productos con precio entre los 1000 a 3000 pesos

db.productos.find({"price" : {$gte : 1000 , $lte : 3000}})

 - Listar los productos con precio mayor a 3000 pesos

db.productos.find({"price" : {$gt : 3000}})

 - Realizar una consulta que traiga sólo el nombre del tercer producto más barato

db.productos.find({},{_id:0,"name":1}).sort({"price":1}).limit(1).skip(2)
!! Para probar que el resultado es el correcto, el siguiente comando muestra la lista de 
   todos los elementos ordenados por precios pero solo con sus nombres
    - db.productos.find({},{_id:0,"name":1}).sort({"price":1})

 - Hacer una actualización sobre todos los productos, agregando el campo stock a todos
ellos con un valor de 100.

db.productos.updateMany({}, {$set :{"stock" : 100}})
db.productos.find()

 - Cambiar el stock a cero de los productos con precios mayores a 4000 pesos.

db.productos.updateMany({"price" : {$gt : 4000}}, {$set :{"stock" : 0}})

 - Borrar los productos con precio menor a 1000 pesos

db.productos.deleteMany({"price" : {$lt : 1000}})

----------------------------------------------------------------------------------------

Crear un usuario 'pepe' clave: 'asd456' que sólo pueda leer la base de datos ecommerce.
Verificar que pepe no pueda cambiar la información.

use admin
db.createUser({
  user : "pepe",
  pwd : "asd456",
  roles : [
    {role :"read", db:"products"},
    {role :"read", db:"mensajes"}
  ]
})